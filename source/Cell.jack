class Cell {

    field int x;				// x-cord
	field int y;				// y-coord
	field int size;				// size of cell
	field boolean selected; 	// cell is selected
	field boolean fill; 		// cell is filled
	field boolean start;		// this is start Cell
	field boolean finish;		// this is finish Cell
	field boolean visited;		// cell is visited
	field Cell parent;			// cell's parent in graph

    /** Constructs the Cell */
    constructor Cell new(int Ax, int Ay, int Asize) {
        let x = Ax;
		let y = Ay;
		let size = Asize;
		let fill = false;
		let selected = false;
		let start = false;
		let finish = false;
		let visited = false;
		let parent = null;
        do show();
        return this;
    }
	
	/** Getters. */
    method int getX() 							{ return x; }
    method int getY() 							{ return y; }
	method int getXcenter() 					{ return x + (size/2); }
    method int getYcenter() 					{ return y + (size/2); }
	method int getXindex()						{ return (x / size); }
	method int getYindex()						{ return (y / size); }
	method int getSize() 						{ return size; }
	method boolean getSelected() 				{ return selected; }
    method boolean getFill() 					{ return fill; }
	method boolean getStart() 					{ return start; }
	method boolean getFinish() 					{ return finish; }
	method boolean getVisited() 				{ return visited; }
	method Cell getParent() 					{ return parent; }
	
	/** Setters. */
	method void setSelected(boolean Aselected) 	{ let selected = Aselected; do draw(); return; }
    method void setFill(boolean Afill) 			{ let fill = Afill; do draw(); return; }
    method void setStart(boolean Astart) 		{ let start = Astart; do draw(); return; }
    method void setFinish(boolean Afinish) 		{ let finish = Afinish; do draw(); return; }
	method void setVisited(boolean Avisited) 	{ let visited = Avisited; do draw(); return; }
	method void setParent(Cell Aparent) 		{ let parent = Aparent; return; }

    /** Deallocates the object's memory. */
    method void dispose() { do Memory.deAlloc(this); return; }

    /** Shows the Cell. */
    method void show() { do Screen.setColor(true); do draw(); return; }

    /** Hides the Cell. */
    method void hide() { do Screen.setColor(false); do draw(); return; }
	
	/** draws the Cell based on its properties. */
	method void draw() {
		if ((~(fill)) & (~(selected))) {		// empty cell graphics
			do Screen.drawRectangle(x, y, x+size, y+size);
			do Screen.setColor(false);
			do Screen.drawRectangle(x+1, y+1, x+size-1, y+size-1);
			do Screen.setColor(true);
		} else {
			if ((~(fill)) & selected) {			// selected cell graphics
				do Screen.drawRectangle(x, y, x+size, y+size);
				do Screen.setColor(false);
				do Screen.drawRectangle(x+4, y+4, x+size-4, y+size-4);
				do Screen.setColor(true);
			} else {
				if (fill & (~(selected))) {		// filled cell graphics
					do Screen.drawRectangle(x, y, x+size, y+size);
				} else {
					if ((fill & selected)) {	// filled & selected cell graphics
						do Screen.setColor(false);
						do Screen.drawRectangle(x+4, y+4, x+size-4, y+size-4);
						do Screen.setColor(true);
					}
				}
			}
		}
		if (start) {	// start cell graphics
			do Screen.drawCircle(getXcenter(), getYcenter(), 8);
		}
		if (finish) {	// finish cell graphics
			do Screen.drawLine(x, y, x+size, y+size);
			do Screen.drawLine(x, y+size, x+size, y);
		}
		if (visited) {	// visited cell graphics
			do Screen.drawRectangle(x, y, x+size, y+size);
			do Screen.setColor(false);
			do Screen.drawRectangle(x+4, y+4, x+size-4, y+size-4);
			do Screen.setColor(true);
		}
		return;
	}
}
